{"version":3,"sources":["components/Board.tsx","components/Header.tsx","App.tsx","index.tsx"],"names":["Wrapper","styled","div","GridBoard","ul","Card","li","GameWon","GameOver","Board","characters","handleClick","score","bestScore","gameOver","gameWon","handlePlayAgain","id","onClick","map","character","value","mal_id","src","image_url","alt","name","toString","Header","highestScore","shuffle","array","randomIndex","currentIndex","length","Math","floor","random","App","useState","setCharacters","setHighestScore","setScore","setBestScore","cardsClicked","setCardsClicked","setGameOver","setGameWon","useEffect","a","fetch","response","json","data","filter","el","fetchData","className","event","target","prevState","includes","changes","e","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9cbd5720.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  margin: 2rem 0;\n  flex-grow: 1;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  padding: 2rem 0;\n`;\n\nconst GridBoard = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(5, 225px);\n  grid-template-rows: 350px;\n  grid-auto-columns: 225px;\n  grid-auto-rows: 350px;\n  gap: 10px;\n\n  li {\n  }\n`;\n\nconst Card = styled.li`\n  cursor: pointer;\n`;\n\nconst GameWon = styled.div`\n  text-align: center;\n`;\n\nconst GameOver = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\ninterface IProps {\n  characters: {\n    image_url: string;\n    mal_id: number;\n    name: string;\n  }[];\n  handleClick: React.MouseEventHandler<HTMLImageElement>;\n  score: number;\n  bestScore: number;\n  gameOver: boolean;\n  gameWon: boolean;\n  handlePlayAgain: React.MouseEventHandler<HTMLButtonElement>;\n}\n\ninterface Character {\n  image_url: string;\n  mal_id: number;\n  name: string;\n}\n\nconst Board = ({\n  characters,\n  handleClick,\n  score,\n  bestScore,\n  gameOver,\n  gameWon,\n  handlePlayAgain,\n}: IProps) => {\n  if (gameWon === true) {\n    return (\n      <Wrapper>\n        <GameWon>\n          <h2>You Won!!</h2>\n          <button id=\"game-won\" onClick={handlePlayAgain}>\n            Play Again\n          </button>\n        </GameWon>\n      </Wrapper>\n    );\n  }\n\n  if (gameOver === true) {\n    return (\n      <Wrapper>\n        <GameOver>\n          <h2>Game Over.</h2>\n          <p>Score: {score}</p>\n          <p>Best Score: {bestScore}</p>\n          <button id=\"game-over\" onClick={handlePlayAgain}>\n            Play Again\n          </button>\n        </GameOver>\n      </Wrapper>\n    );\n  }\n\n  return (\n    <Wrapper>\n      <GridBoard>\n        {characters.map((character: Character) => (\n          <Card value={character.mal_id} key={character.mal_id}>\n            <img\n              src={character.image_url}\n              alt={character.name}\n              id={character.mal_id.toString()}\n              onClick={handleClick}\n            />\n          </Card>\n        ))}\n      </GridBoard>\n    </Wrapper>\n  );\n};\n\nexport default Board;\n","import styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  height: 8rem;\n\n  h2 {\n    font-size: 2.5rem;\n  }\n\n  div {\n    display: flex;\n    justify-content: space-between;\n    width: 16rem;\n\n    h4 {\n      font-size: 1.2rem;\n    }\n  }\n`;\n\ninterface IProps {\n  score: number;\n  highestScore: number;\n  bestScore: number;\n}\n\nconst Header = ({ score, bestScore, highestScore }: IProps) => {\n  return (\n    <Wrapper>\n      <h2>Memgame</h2>\n      <div>\n        <h4>\n          Score: <span>{score}</span>\n        </h4>\n        <h4>\n          Best Score:{\" \"}\n          <span>\n            {bestScore}/{highestScore}\n          </span>\n        </h4>\n      </div>\n    </Wrapper>\n  );\n};\n\nexport default Header;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport Board from \"./components/Board\";\nimport Header from \"./components/Header\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  background-color: #1a1a1a;\n  color: #f4f4f4;\n  align-items: center;\n`;\n\ninterface IState {\n  image_url: string;\n  mal_id: number;\n  name: string;\n}\n\n// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nfunction shuffle(array: IState[]) {\n  var currentIndex = array.length,\n    randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\nfunction App() {\n  const [characters, setCharacters] = useState([] as IState[]);\n  const [highestScore, setHighestScore] = useState<number>(0);\n  const [score, setScore] = useState<number>(0);\n  const [bestScore, setBestScore] = useState<number>(0);\n  const [cardsClicked, setCardsClicked] = useState<string[]>([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameWon, setGameWon] = useState(false);\n\n  const handleClick = (event: React.SyntheticEvent<HTMLImageElement, Event>) => {\n    const target = event.target as HTMLImageElement;\n\n    // add card to clicked cards\n    setCardsClicked((prevState) => {\n      return [...prevState, target.id];\n    });\n\n    // won the game\n    if (cardsClicked.length === characters.length) {\n      setGameWon(true);\n    }\n\n    // check if card was already clicked\n    if (cardsClicked.includes(target.id)) {\n      setGameOver(true);\n      setBestScore(score);\n    } else {\n      setScore(score + 1);\n\n      const changes = shuffle([...characters]);\n      setCharacters(changes);\n    }\n  };\n\n  const handlePlayAgain = (e: any) => {\n    setScore(0);\n    setCardsClicked([]);\n\n    if (e.target.id === \"game-over\") {\n      setGameOver(false);\n    }\n\n    if (e.target.id === \"game-won\") {\n      setGameWon(false);\n      setBestScore(0);\n    }\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\n        \"https://api.jikan.moe/v3/anime/32998/characters_staff\"\n      );\n      const data = await response.json();\n\n      setCharacters(\n        // data from api has 2 broken imgs so I filtered them out\n        data.characters.filter(\n          (el: { mal_id: number }) => el.mal_id !== 142390 && el.mal_id !== 142382\n        )\n      );\n\n      setHighestScore(data.characters.length - 2);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <Wrapper className=\"App\">\n      <Header score={score} bestScore={bestScore} highestScore={highestScore} />\n      <Board\n        characters={shuffle(characters)}\n        handleClick={handleClick}\n        score={score}\n        bestScore={bestScore}\n        gameOver={gameOver}\n        gameWon={gameWon}\n        handlePlayAgain={handlePlayAgain}\n      />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}